{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","state","isValid","handleChange","event","target","name","value","setState","setValidation","inputName","validation","validateInput","inputValue","test","length","this","titleValid","idValid","imdbValid","imgValid","initialState","errorStyle","border","borderRadius","method","onSubmit","preventDefault","props","addMovie","required","style","type","placeholder","onChange","onBlur","maxLength","rows","disabled","Object","values","every","Component","App","moviesFromServer","newMovie","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.852c7fc7.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description || '<no description>'}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import { Component } from 'react';\nimport './NewMovie.scss';\n\ntype Props = {\n  addMovie: (movie: Movie) => void,\n};\n\ntype State = {\n  movie: Movie,\n  isValid: {\n    title?: boolean,\n    imgUrl?: boolean,\n    imdbUrl?: boolean,\n    imdbId?: boolean,\n  },\n};\n\nexport class NewMovie extends Component<Props, State> {\n  state: State = {\n    movie: {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    },\n    isValid: {\n      title: true,\n      imgUrl: true,\n      imdbUrl: true,\n      imdbId: true,\n    },\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    this.setState(state => ({\n      movie: {\n        ...state.movie,\n        [name]: value,\n      },\n    }));\n  };\n\n  setValidation = (inputName: string, validation: {}) => {\n    this.setState(state => ({\n      isValid: {\n        ...state.isValid,\n        [inputName]: validation,\n      },\n    }));\n  };\n\n  validateInput = (inputName: string, inputValue: string) => {\n    // eslint-disable-next-line max-len\n    const regexUrl = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n    const regexImdbId = /^[a-z]{2,}\\d+$/;\n    const regexImdbUrl = /https:\\/\\/www\\.imdb\\.com\\/title\\/[a-z]{2,}\\d+/;\n\n    switch (inputName) {\n      case 'imgUrl':\n        this.setValidation(inputName, regexUrl.test(inputValue));\n        break;\n\n      case 'imdbUrl':\n        this.setValidation(inputName, regexImdbUrl.test(inputValue));\n        break;\n\n      case 'title':\n        this.setValidation(inputName, inputValue.length >= 4);\n        break;\n\n      case 'imdbId':\n        this.setValidation(inputName, regexImdbId.test(inputValue));\n        break;\n\n      default:\n    }\n  };\n\n  render() {\n    const {\n      title, description,\n      imgUrl, imdbUrl,\n      imdbId,\n    } = this.state.movie;\n\n    const {\n      title: titleValid,\n      imdbId: idValid,\n      imdbUrl: imdbValid,\n      imgUrl: imgValid,\n    } = this.state.isValid;\n\n    const initialState = {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    };\n\n    const errorStyle = {\n      border: '2px solid #9b2226',\n      borderRadius: '5px',\n    };\n\n    return (\n      <>\n        <form\n          method=\"POST\"\n          className=\"new-movie-form\"\n          onSubmit={(event) => {\n            event.preventDefault();\n            this.props.addMovie(this.state.movie);\n            this.setState({ movie: initialState });\n          }}\n        >\n          <p\n            className=\"new-movie-form__title\"\n          >\n            To add new movie, fill in data below:\n          </p>\n\n          <input\n            required\n            className=\"new-movie-form__input\"\n            style={!titleValid ? errorStyle : {}}\n            type=\"text\"\n            placeholder=\"title\"\n            name=\"title\"\n            value={title}\n            onChange={this.handleChange}\n            onBlur={(event) => {\n              this.validateInput(event.target.name, event.target.value);\n            }}\n          />\n          {!titleValid && (\n            <p className=\"error-text\">Title should be 4+ chars</p>\n          )}\n\n          <input\n            required\n            className=\"new-movie-form__input\"\n            style={!imgValid ? errorStyle : {}}\n            type=\"text\"\n            placeholder=\"image url (https://_imgUrl_)\"\n            name=\"imgUrl\"\n            value={imgUrl}\n            onChange={this.handleChange}\n            onBlur={(event) => {\n              this.validateInput(event.target.name, event.target.value);\n            }}\n          />\n          {!imgValid && (\n            <p className=\"error-text\">imgUrl must be a valid url</p>\n          )}\n\n          <input\n            required\n            className=\"new-movie-form__input\"\n            style={!imdbValid ? errorStyle : {}}\n            type=\"text\"\n            placeholder=\"imdb url (https://www.imdb.com/title/_imdbId_)\"\n            name=\"imdbUrl\"\n            value={imdbUrl}\n            onChange={this.handleChange}\n            onBlur={(event) => {\n              this.validateInput(event.target.name, event.target.value);\n            }}\n          />\n          {!imdbValid && (\n            <p className=\"error-text\">imdbUrl must be a valid url</p>\n          )}\n\n          <input\n            required\n            className=\"new-movie-form__input\"\n            style={!idValid ? errorStyle : {}}\n            type=\"text\"\n            placeholder=\"imdb id\"\n            name=\"imdbId\"\n            value={imdbId}\n            onChange={this.handleChange}\n            onBlur={(event) => {\n              this.validateInput(event.target.name, event.target.value);\n            }}\n          />\n          {!idValid && (\n            <p className=\"error-text\">imdbId must meet a format: 2+ letters followed by digits</p>\n          )}\n\n          <textarea\n            className=\"new-movie-form__input\"\n            placeholder=\"description (max length 150 chars)\"\n            name=\"description\"\n            maxLength={150}\n            rows={4}\n            value={description}\n            onChange={this.handleChange}\n          />\n\n          <button\n            type=\"submit\"\n            disabled={!Object.values(this.state.isValid)\n              .every(validation => validation === true)}\n          >\n            Add a movie\n          </button>\n\n        </form>\n\n        <hr />\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (newMovie: Movie): void => {\n    this.setState(state => ({\n      movies: [\n        ...state.movies,\n        newMovie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n\n        <div className=\"sidebar\">\n          <NewMovie\n            addMovie={this.addMovie}\n          />\n        </div>\n\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}